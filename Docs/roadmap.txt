ROADMAP FOR THE KNIGHT READER APPLICATION
=========================================
We know that we are going to use the MVC pattern which is really going 
to be a pattern of patterns.

The most important detail about the project is that we are going to
have to deal with three main classes and that our development style
in these classes would be somewhat "recursive." "Recursive" in the
sense that we might have to create additional classes to bolster our
current design and implementations without being verbose or/and 
without putting any superfluous classes and methods (although this
is a very subjective issue).

We are going to have the: 
1. Controller
2. View
3. Model 
classes. 

This is what I think we should do before Tuesday, if possible:
1. Have a working controller class. This class should have children
   classes (I mean a HAS-A relationship here). Some of them might be
   for the facilities. For example, for sorting and searching and all
   that stuff. 
   In implementing the controlle class, we should think about what
   we are coding as a terminal based implementation of the program.
   So let's try to forget about the GUI here which is mostly going to
   be handled by the view. The facilities class should come with their
   own unit tests (implemented from the JUnit package). Each test
   should have a name that pertains to its function. eg. sortTest.java
   and xxxxTest.java. All these tests, I think, should be stored in a
   TESTS folder.

2. As for the view, I can start to work on it and then put the
   "barebones" implementation in the svn so that we can collectively
   work from there.

3. For the model, we have to decide what file structure we should use
    for the files that we are going to store ( whoever
   works on it first will have to decide on which
    "reasonable/easy-to-understand" file structure we should all adopt.
    I suggest we store data in an xml style. For example:
    In our knightReader application data directory, we could have a
    file(s) that stores the names and numbers of the groups (tags/
    folders) the user has created so far (maybe "tags.xml" or something
    like that) and other relevant metadata if need be. Then we should
    create a directory for each directory (I don't know if this is a 
    good idea, though). Anyways, if we just have a directory for all
    the tags (that contain feeds), we could call each file "____.xml",\
     e.g "comedy.xml".

comedy.xml:
<tag>
	<tagName>comedy</tagName>
	<feed>xkcd</feed>
		<feedTitle>"Real name of feed"</feedTitle>
		<feedDesc>..</feedDesc>
		<feedLink>...</feedLink>
		<feedPubDate>..</feedPubDate>
			<entry> ...</entry>
			<entry> ...</entry>
			<entry> .. </entry>
			<entry> .. </entry>
				<entryTitle> .. </entryTitle>
				<entryLink> .. </entryLink>
				<entryDesc> .. </entryDesc>
				<entryPubDate> .. </entryPubDate>\
	<feed>SomeOtherComedyFeed</feed>
	     <same as in last one...><...>

Then we could use some packages in java to read the xmlDocument and translate
its DOM structure into something that we can use:

Something like this:


import java.io.File;
import org.w3c.dom.Document;
import org.w3c.dom.*;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException; 

public class ReadFeedFile{

    public static void main (String argv []){
    try {

            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse (new File("comedy.xml"));

            // normalize text representation
            doc.getDocumentElement ().normalize ();
            System.out.println ("Root element of the doc is " + 
                 doc.getDocumentElement().getNodeName());


            NodeList listOfFeeds = doc.getElementsByTagName("feed");
            int totalFeeds = listOfFeeds.getLength();
            System.out.println("Total no of people : " + totalFeeds);

            for(int s=0; s<listOfFeeds.getLength() ; s++){


                Node firstFeedNode = listOfFeeds.item(s);
                if(firstFeedNode.getNodeType() == Node.ELEMENT_NODE){


                    Element firstFeedElement = (Element)firstFeedNode;

                    //-------
		    // and then some other crap... oops
		    // I didn't update names of the remaining code below

                    NodeList firstNameList = firstPersonElement.getElementsByTagName("first");
                    Element firstNameElement = (Element)firstNameList.item(0);

                    NodeList textFNList = firstNameElement.getChildNodes();
                    System.out.println("First Name : " + 
                           ((Node)textFNList.item(0)).getNodeValue().trim());

                    //-------
                    NodeList lastNameList = firstPersonElement.getElementsByTagName("last");
                    Element lastNameElement = (Element)lastNameList.item(0);

                    NodeList textLNList = lastNameElement.getChildNodes();
                    System.out.println("Last Name : " + 
                           ((Node)textLNList.item(0)).getNodeValue().trim());

                    //----
                    NodeList ageList = firstPersonElement.getElementsByTagName("age");
                    Element ageElement = (Element)ageList.item(0);

                    NodeList textAgeList = ageElement.getChildNodes();
                    System.out.println("Age : " + 
                           ((Node)textAgeList.item(0)).getNodeValue().trim());

                    //------


                }//end of if clause


            }//end of for loop with s var


        }catch (SAXParseException err) {
        System.out.println ("** Parsing error" + ", line " 
             + err.getLineNumber () + ", uri " + err.getSystemId ());
        System.out.println(" " + err.getMessage ());

        }catch (SAXException e) {
        Exception x = e.getException ();
        ((x == null) ? e : x).printStackTrace ();

        }catch (Throwable t) {
        t.printStackTrace ();
        }
        //System.exit (0);

    }//end of main


}

This is just an example of how we can read stuff from the xml file, something
that I found on the internet from: 
http://www.developerfusion.com/code/2064/a-simple-way-to-read-an-xml-file-in-java/



I think we should begin work as early as possible. 
By the way, this is just phase one. I think we should try to finish all these 
things by Tuesday.
And then we could move on to phase two (Wednesday---Thursday -Connecting the
 view to the controller and then placing the model somewhere) and then phase
 three (Friday --- Saturday -Finishing up). 
 Lastly phase 4: Sunday ("Did we meet all Amy's requirements?").
